// Code generated by "enumer -type=Chain -linecomment -json=true -text=true -sql=true"; DO NOT EDIT.

package common

import (
	"database/sql/driver"
	"encoding/json"
	"fmt"
	"strings"
)

const _ChainName = "base"

var _ChainIndex = [...]uint8{0, 4}

const _ChainLowerName = "base"

func (i Chain) String() string {
	i -= 1
	if i >= Chain(len(_ChainIndex)-1) {
		return fmt.Sprintf("Chain(%d)", i+1)
	}
	return _ChainName[_ChainIndex[i]:_ChainIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _ChainNoOp() {
	var x [1]struct{}
	_ = x[ChainBase-(1)]
}

var _ChainValues = []Chain{ChainBase}

var _ChainNameToValueMap = map[string]Chain{
	_ChainName[0:4]:      ChainBase,
	_ChainLowerName[0:4]: ChainBase,
}

var _ChainNames = []string{
	_ChainName[0:4],
}

// ChainString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func ChainString(s string) (Chain, error) {
	if val, ok := _ChainNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _ChainNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to Chain values", s)
}

// ChainValues returns all values of the enum
func ChainValues() []Chain {
	return _ChainValues
}

// ChainStrings returns a slice of all String values of the enum
func ChainStrings() []string {
	strs := make([]string, len(_ChainNames))
	copy(strs, _ChainNames)
	return strs
}

// IsAChain returns "true" if the value is listed in the enum definition. "false" otherwise
func (i Chain) IsAChain() bool {
	for _, v := range _ChainValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for Chain
func (i Chain) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for Chain
func (i *Chain) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("Chain should be a string, got %s", data)
	}

	var err error
	*i, err = ChainString(s)
	return err
}

// MarshalText implements the encoding.TextMarshaler interface for Chain
func (i Chain) MarshalText() ([]byte, error) {
	return []byte(i.String()), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface for Chain
func (i *Chain) UnmarshalText(text []byte) error {
	var err error
	*i, err = ChainString(string(text))
	return err
}

func (i Chain) Value() (driver.Value, error) {
	return i.String(), nil
}

func (i *Chain) Scan(value interface{}) error {
	if value == nil {
		return nil
	}

	var str string
	switch v := value.(type) {
	case []byte:
		str = string(v)
	case string:
		str = v
	case fmt.Stringer:
		str = v.String()
	default:
		return fmt.Errorf("invalid value of Chain: %[1]T(%[1]v)", value)
	}

	val, err := ChainString(str)
	if err != nil {
		return err
	}

	*i = val
	return nil
}
